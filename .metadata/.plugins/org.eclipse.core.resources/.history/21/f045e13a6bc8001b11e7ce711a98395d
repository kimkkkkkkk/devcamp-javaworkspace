package JavaProject.tour.message;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import JavaProject.tour.DBManager;


public class MessageApp extends JFrame {
   JPanel p_east, p_west, p_center;

   JPanel la_panel;
   JLabel la_text;

   JTable table; // 테이블 나올 곳
   JScrollPane t_scroll;

   // 동쪽

   JPanel empty, emptyw; // 띄어쓰기
   JLabel t_text, t_textw;

   JPanel empty3, empty3w;
   JLabel la_title ,la_titlew; // 제목
   JTextField title, titlew;
   JLabel la_writer, la_writerw; // 작성자
   JTextField writer, writerw;
   JPanel empty4, empty4w;

   JLabel la_content, la_contentw;
   JTextArea content, contentw; // 문의내용
   JScrollPane scroll, scrollw;
   JPanel bt_empty, bt_emptyw;
   JButton bt_regist, bt_registw;
   JButton bt_registc, bt_registcw;

   String[] columnName = { "ID", "title", "writer", "content", "regdate", "hit" };
   String[][] rows = {};

   DBManager dbmanager = new DBManager();
   Connection con = dbmanager.getConnection();
   MessageModel messagemodel;

   public MessageApp() {

      // 상단바 & 테이블
      p_center = new JPanel();
      la_panel = new JPanel(); // 검색패널

      table = new JTable();

      t_scroll = new JScrollPane(table);
      la_text = new JLabel("Review content"); // 검색창

      // 동쪽 영역 (차량정보 등)
      p_east = new JPanel();
      empty = new JPanel();
      t_text = new JLabel("리뷰를 등록해주세요");

      empty3 = new JPanel();
      la_title = new JLabel("제목");
      title = new JTextField(25);
      la_writer = new JLabel("작성자");
      writer = new JTextField(25);

      // 요청사항
      // empty4 = new JPanel();
      la_content = new JLabel("내용");
      content = new JTextArea("--내용을 입력하세요--");
      scroll = new JScrollPane(content);

      bt_empty = new JPanel();
      bt_regist = new JButton("등록하기");
      bt_registc = new JButton("게시판 목록");
      
      // 서쪽영역
      p_west = new JPanel();
      emptyw = new JPanel();
      t_textw = new JLabel("리뷰를 등록해주세요");

      empty3w = new JPanel();
      la_titlew = new JLabel("제목");
      titlew = new JTextField(25);
      la_writerw = new JLabel("작성자");
      writerw = new JTextField(25);

      // 요청사항
      // empty4w = new JPanel();
      la_contentw = new JLabel("내용");
      contentw = new JTextArea("--내용을 입력하세요--");
      scrollw = new JScrollPane(content);

      bt_emptyw = new JPanel();
      bt_registw = new JButton("등록하기");
      bt_registcw = new JButton("게시판 목록");

      // 스타일 및 레이아웃

      la_text.setFont(new Font("Vredana", Font.BOLD, 25));
      la_title.setFont(new Font("Vredana", Font.BOLD, 15));
      la_writer.setFont(new Font("Vredana", Font.BOLD, 15));
      la_content.setFont(new Font("Vredana", Font.BOLD, 15));
      la_titlew.setFont(new Font("Vredana", Font.BOLD, 15));
      la_writerw.setFont(new Font("Vredana", Font.BOLD, 15));
      la_contentw.setFont(new Font("Vredana", Font.BOLD, 15));
      setLayout(new BorderLayout());
      t_scroll.setPreferredSize(new Dimension(500, 400));

      // 상단
      p_center.setPreferredSize(new Dimension(30, 30));
      content.setPreferredSize(new Dimension(300, 80));
      contentw.setPreferredSize(new Dimension(300, 80));

      // 정보
      p_east.setLayout(new FlowLayout());
      p_east.setPreferredSize(new Dimension(380, 500));
      p_west.setLayout(new FlowLayout());
      p_west.setPreferredSize(new Dimension(380, 500));

      // 예약정보 글씨
      t_text.setFont(new Font("Serif", Font.BOLD, 25));
      scroll.setPreferredSize(new Dimension(180, 180));
      empty.setPreferredSize(new Dimension(70, 100));
      t_textw.setFont(new Font("Serif", Font.BOLD, 25));
      scrollw.setPreferredSize(new Dimension(180, 180));
      emptyw.setPreferredSize(new Dimension(70, 100));

      bt_empty.setPreferredSize(new Dimension(380, 4));
      la_title.setPreferredSize(new Dimension(200, 50));
      bt_emptyw.setPreferredSize(new Dimension(380, 4));
      la_titlew.setPreferredSize(new Dimension(200, 50));
      p_center.setLayout(new FlowLayout());
      

      Dimension a = new Dimension(380, 40);
      empty3.setPreferredSize(a);
      empty3w.setPreferredSize(a);
      // empty4.setPreferredSize(a);

      Dimension z = new Dimension(120, 30);
      la_title.setPreferredSize(z);
      la_writer.setPreferredSize(z);
      la_content.setPreferredSize(z);
      la_titlew.setPreferredSize(z);
      la_writerw.setPreferredSize(z);
      la_contentw.setPreferredSize(z);
      

      Dimension e = new Dimension(200, 30);
      title.setPreferredSize(e);
      writer.setPreferredSize(e);
      titlew.setPreferredSize(e);
      writerw.setPreferredSize(e);

      p_center.add(la_panel);
      la_panel.add(la_text);
      p_center.add(t_scroll);
      // p_east.add(empty);
      p_east.add(t_text);
      p_east.add(empty3);
      p_east.add(la_title);
      p_east.add(title);
      p_east.add(la_writer);
      p_east.add(writer);
      p_east.add(la_content);
      // p_east.add(empty4);
      p_east.add(content);
      p_east.add(bt_empty);
      p_east.add(bt_regist);
      p_east.add(bt_registc);
      // p_west.add(emptyw);
      p_west.add(t_textw);
      p_west.add(empty3w);
      p_west.add(la_titlew);
      p_west.add(titlew);
      p_west.add(la_writerw);
      p_west.add(writerw);
      p_west.add(la_contentw);
      // p_west.add(empty4w);
      p_west.add(contentw);
      p_west.add(bt_emptyw);
      p_west.add(bt_registw);
      p_west.add(bt_registcw);

      add(p_center, BorderLayout.NORTH);
      add(p_east, BorderLayout.EAST);
      add(p_west, BorderLayout.WEST);
      add(p_center);

      setBounds(300, 100, 1300, 500);
      setVisible(true);
      setDefaultCloseOperation(EXIT_ON_CLOSE);
      
      
      
  	//이벤트
      
		this.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				System.exit(0); // 프로세스 종료
				//release(con);
			}
			
		
		});
		
		
		//등록버튼 구현
		bt_regist.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				regist();
				getList(); // 목록 가져오기
				table.updateUI();
			}
		});
		
		//게시판목록버튼 구현
		bt_registc.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				getList(); // 목록 가져오기
				table.updateUI();
			}
		});

   }
   
 //mysql 접속
 	
   
   public void regist() {
		String sql="insert into message(title,writer,content) values(?,?,?)";
		PreparedStatement pstmt=null;
		//Connection con=dbmanager.getConnection();
		try {
			pstmt=con.prepareStatement(sql);
			pstmt.setString(1, title.getText());
			pstmt.setString(2, writer.getText());
			pstmt.setString(3, content.getText());
			int result=pstmt.executeUpdate();
			if(result==1) {
				JOptionPane.showMessageDialog(this, "등록성공");
			}else {
				JOptionPane.showMessageDialog(this, "등록실패");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			//release(pstmt);
		}
	}
	
	
	//목록
	public void getList() {
		String sql="select * from message order by message_id desc";
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		ResultSetMetaData meta; //컬럼 정보 등을 가져오기 위한 객체
		messagemodel = new MessageModel();
		
		try {
			pstmt=con.prepareStatement(sql);
			rs=pstmt.executeQuery(); 
			meta = rs.getMetaData();
			
			
			int col_count = meta.getColumnCount(); 
			
			for(int i=1;i<=col_count;i++) {
				String name=meta.getColumnName(i);
				System.out.println(name);
				messagemodel.column.add(name); 
			}
			
			while(rs.next()) {
				Message message = new Message();
				
				message.setMessage_id(rs.getInt("message_id"));
				message.setTitle(rs.getString("title"));
				message.setWriter(rs.getString("writer"));
				message.setContent(rs.getString("content"));
				message.setHit(rs.getInt("hit"));
				message.setRegdate(rs.getString("regdate"));
				
				messagemodel.data.add(message);//한건의 레코드를 담은 VO를 백터에 추가하자
			}
			//Model에 들어있는 메서드들은, Table에 해당 모데 적용시점에 호출되는 것을 알 수 있다.
			//이때 JTable 원하는 정보를 모델로부터 얻어간다!
			table.setModel(messagemodel); // JTable의 생성자에서 모델을 결정하는게 아니라, 생성된 모델중 원하는 모델을
											 // 테이블에 적용시키고 싶을때
			table.updateUI();
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			dbmanager.release(con,pstmt,rs);
		}
		
	}
	
	//수정
	
	//삭제
	
	//회원목록 가져오기
	public void getMemberList() {
		String sql="select * from submember";
		PreparedStatement pstmt=null;
		ResultSet rs = null;
		ResultSetMetaData meta = null;
		SubMemberModel submembermodel = null;
		
		try {
			pstmt = con.prepareStatement(sql);
			rs= pstmt.executeQuery();
			meta = rs.getMetaData();
			submembermodel = new SubMemberModel();
			
			//컬럼 정보 채우기
			for(int i =1;i<meta.getColumnCount();i++) {
				String name = meta.getColumnName(i);
				submembermodel.column.add(name); // 컬럼구성
			}
			
			//레코드 채우기
			while(rs.next()) {
				SubMember submember = new SubMember(); //empty상태의 VO상태
				submember.setSubmember_id(rs.getInt("submember_id"));
				submember.setMember_id(rs.getInt("member_id"));
				submember.setUser_id(rs.getString("user_id"));
				submember.setPassword(rs.getString("password"));
				submember.setName(rs.getString("name"));
				submember.setRegdate(rs.getString("regdate"));
			
				submembermodel.data.add(submember);
				
			}
			table.setModel(submembermodel); // JTable에 모델 적용, 이 순간부터 JTable은 Model의
														 // 메서드 호출하여, 데이터를 채워나간다!!
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			dbmanager.release(con,pstmt,rs);
		}
	}
	
	


   public static void main(String[] args) {
      new MessageApp();
   }
}